{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNX0bBrhNR88jCoxNq/21PQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/padilxd/praktik1kka/blob/main/praktikumlanjutan\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KNDIBr9uRLec",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "660ec134-e1fe-4c13-8dda-430677e1b0e2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before casting : 456 , the data type is <class 'str'>\n",
            "After casting : 456 , the data type is <class 'int'>\n"
          ]
        }
      ],
      "source": [
        "# cast from str to int\n",
        "str_numbers = \"456\"\n",
        "str_numbers_to_int = int(str_numbers)\n",
        "print(\"Before casting :\", str_numbers, \", the data type is\",\n",
        "type(str_numbers))\n",
        "print(\"After casting :\", str_numbers_to_int, \", the data type is\",\n",
        "type(str_numbers_to_int))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# casting from int to str\n",
        "integer = 12345\n",
        "integer_to_str = str(integer)\n",
        "print(\"Before casting :\", integer, \", the data type is\", type(integer))\n",
        "print(\"After casting :\", integer_to_str, \", the data type is\",\n",
        "type(integer_to_str))"
      ],
      "metadata": {
        "id": "KroeU85YOic7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# casting from int to bool\n",
        "num_int = 1\n",
        "num_bool = bool(num_int)\n",
        "print(num_bool, type(num_bool))\n",
        "num_int = 0\n",
        "\n",
        "num_bool = bool(num_int)\n",
        "print(num_bool, type(num_bool))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "64ifHrFbOs2D",
        "outputId": "92e5fe5f-d494-4d60-fa8d-7a0ddee0c134"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True <class 'bool'>\n",
            "False <class 'bool'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Equal to\n",
        "8 == 8\n",
        "# Not equal to\n",
        "8 != 9\n",
        "# Greater than\n",
        "8 > 9\n",
        "# Less than\n",
        "8 < 9\n",
        "# Less than\n",
        "8 <= 9\n",
        "# Less than\n",
        "9 >= 9"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_VQXT9GbOvNw",
        "outputId": "68db0671-e53f-495f-9cfb-df3c4780f0d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = True\n",
        "b = True\n",
        "print(a and b)\n",
        "print(a or b)\n",
        "print(not b)\n",
        "#logic\n",
        "5 > 6 and 6 < 7"
      ],
      "metadata": {
        "id": "bIaxl0ZCOxDm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "e = 8\n",
        "f = 2\n",
        "# Summation\n",
        "sum = e + f\n",
        "print(f\"The sum of e with f is : {sum}\\n\")\n",
        "# Reduction\n",
        "red = e - f\n",
        "print(f\"The reduction of e with f is : {red}\\n\")\n",
        "\n",
        "# Multiplication\n",
        "multi = e * f\n",
        "print(f\"The multipication of e with f is : {multi}\\n\")\n",
        "# Division\n",
        "divi = e / f\n",
        "print(f\"The quotient of e with f is : {divi}\\n\")\n",
        "# Modulo\n",
        "mod = e % f\n",
        "print(f\"The remainder of e with f is : {mod}\\n\")\n",
        "# Power\n",
        "pow = e ** f\n",
        "print(f\"The power of e of f is : {pow}\\n\")"
      ],
      "metadata": {
        "id": "pjyuTNy-Oy3y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "name = str(input(\"What is your name : \"))\n",
        "age = int(input(\"What's your age : \"))\n",
        "print(\"Name: \", name)\n",
        "print(\"Age: \", age)"
      ],
      "metadata": {
        "id": "T3sacoHzO09m"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# normal print\n",
        "print('Hi all! I am', name, 'age', age, 'years old')\n",
        "Hi all! I am Parman age 24 years old\n",
        "# format print\n",
        "print(f'Hi all! I am {name} age {age} years old')\n",
        "Hi all! I am Parman age 24 years old\n",
        "# format print\n",
        "print(f'Hi all! I am %s age %d years old' %(name, age))\n",
        "# fortmat output\n",
        "print(30*\"=\")\n",
        "print(\"Temperature Calculator Program\")\n",
        "print(30*\"=\")"
      ],
      "metadata": {
        "id": "HnzbtoxQO3Rc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "  your_GPA = float(input(\"Enter your GPA: \"))\n",
        "  if 4.0 >= your_GPA >= 0.0:\n",
        "     if 4.0 >= your_GPA >= 3.80:\n",
        "      print (f\"Damn you've got a magna cumlaude with your {your_GPA} GPA\")\n",
        "      elif 3.50 <= your_GPA < 3.80:\n",
        "             print(f\"Cool!! You've got a cumlaude with your {your_GPA} GPA\")\n",
        "      elif 3.00 <= your_GPA < 3.50:\n",
        "print(f\"You've got a stable GPA tho\")\n",
        "elif your_GPA < 3.0:\n",
        "print(f\"You need a stable GPA\")\n",
        "else:\n",
        "print(f\"Sorry, your GPA {your_GPA} is out of range and invalid\")\n",
        "except:\n",
        "print(\"Please enter a valid GPA\")\n"
      ],
      "metadata": {
        "id": "p-zGxD6bO78-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "status_code = int(input(\"Enter your status code: \"))\n",
        "print(\"Your code means\")\n",
        "match status_code:\n",
        "case 200:\n",
        "print(\"Success!\")\n",
        "case 400:\n",
        "print(\"Bad Request\")\n",
        "case 401:\n",
        "print(\"Unauthorized\")\n",
        "case 402:\n",
        "print(\"Payment Required\")\n",
        "case 403:\n",
        "print(\"Forbidden\")\n",
        "case 404:\n",
        "print(\"Not Found\")\n",
        "case 500:\n",
        "print(\"Internal Server Error\")\n",
        "except :\n",
        "print(\"Please enter a valid status code\")"
      ],
      "metadata": {
        "id": "bAKhu9AEPIjp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a = 3\n",
        "b = \"Even Numbers\" if a % 2 == 0 else \"Odd Numbers\"\n",
        "print(b)"
      ],
      "metadata": {
        "id": "eC5hHQz-PJSL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(5):\n",
        "print(i)\n",
        "0\n",
        "1\n",
        "2\n",
        "3\n",
        "4\n",
        "# For loop with range\n",
        "for i in range(5):\n",
        "print(\"Data science is easy!\")\n",
        "print(50*\"=\")\n",
        "for i in range(1, 5, 2):\n",
        "print(\"Data science is easy!\")"
      ],
      "metadata": {
        "id": "1n6mAkqGPK2U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "word = \"I want to master data science\"\n",
        "for letter in word:\n",
        "print(letter)"
      ],
      "metadata": {
        "id": "fO1SQ7xePM1w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# You can use it with enumerate function\n",
        "for m, n in enumerate(word):\n",
        "print(f\"Index {m}. {n}\")"
      ],
      "metadata": {
        "id": "yj8ZlTf0PO5w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# It can go backwards\n",
        "for i in range(5,1,-1):\n",
        "print(\"I want big data's\")"
      ],
      "metadata": {
        "id": "PAAQLShvPQ_U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(5):\n",
        "if i == 2:\n",
        "continue # skip theis loop when i is equal to 2\n",
        "if i == 4:\n",
        "break # stops the loop when i is equal to 4\n",
        "print(i)"
      ],
      "metadata": {
        "id": "Y8FgY5piPS0D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "count = 0\n",
        "while count < 4:\n",
        "print(\"Keep the spirits up interns!\")\n",
        "count += 1"
      ],
      "metadata": {
        "id": "CWMQHwHnPUW0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "nt63hJ5RPVwE"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}